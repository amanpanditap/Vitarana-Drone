// Generated by gencpp from file vitarana_drone/position.msg
// DO NOT EDIT!


#ifndef VITARANA_DRONE_MESSAGE_POSITION_H
#define VITARANA_DRONE_MESSAGE_POSITION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace vitarana_drone
{
template <class ContainerAllocator>
struct position_
{
  typedef position_<ContainerAllocator> Type;

  position_()
    : lat(0.0)
    , long(0.0)
    , alt(0.0)  {
    }
  position_(const ContainerAllocator& _alloc)
    : lat(0.0)
    , long(0.0)
    , alt(0.0)  {
  (void)_alloc;
    }



   typedef double _lat_type;
  _lat_type lat;

   typedef double _long_type;
  _long_type long;

   typedef double _alt_type;
  _alt_type alt;





  typedef boost::shared_ptr< ::vitarana_drone::position_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vitarana_drone::position_<ContainerAllocator> const> ConstPtr;

}; // struct position_

typedef ::vitarana_drone::position_<std::allocator<void> > position;

typedef boost::shared_ptr< ::vitarana_drone::position > positionPtr;
typedef boost::shared_ptr< ::vitarana_drone::position const> positionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vitarana_drone::position_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vitarana_drone::position_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::vitarana_drone::position_<ContainerAllocator1> & lhs, const ::vitarana_drone::position_<ContainerAllocator2> & rhs)
{
  return lhs.lat == rhs.lat &&
    lhs.long == rhs.long &&
    lhs.alt == rhs.alt;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::vitarana_drone::position_<ContainerAllocator1> & lhs, const ::vitarana_drone::position_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace vitarana_drone

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::vitarana_drone::position_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vitarana_drone::position_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vitarana_drone::position_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vitarana_drone::position_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vitarana_drone::position_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vitarana_drone::position_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vitarana_drone::position_<ContainerAllocator> >
{
  static const char* value()
  {
    return "24a51b5bef95cbf4999116f3fd0f827c";
  }

  static const char* value(const ::vitarana_drone::position_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x24a51b5bef95cbf4ULL;
  static const uint64_t static_value2 = 0x999116f3fd0f827cULL;
};

template<class ContainerAllocator>
struct DataType< ::vitarana_drone::position_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vitarana_drone/position";
  }

  static const char* value(const ::vitarana_drone::position_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vitarana_drone::position_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 lat\n"
"float64 long\n"
"float64 alt\n"
;
  }

  static const char* value(const ::vitarana_drone::position_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vitarana_drone::position_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.lat);
      stream.next(m.long);
      stream.next(m.alt);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct position_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vitarana_drone::position_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vitarana_drone::position_<ContainerAllocator>& v)
  {
    s << indent << "lat: ";
    Printer<double>::stream(s, indent + "  ", v.lat);
    s << indent << "long: ";
    Printer<double>::stream(s, indent + "  ", v.long);
    s << indent << "alt: ";
    Printer<double>::stream(s, indent + "  ", v.alt);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VITARANA_DRONE_MESSAGE_POSITION_H
